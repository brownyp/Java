/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.main;

import Thread.Threadsystem;
import Util.Util;
import business.system.EcoSystem;
import business.city.City;
import business.enterprise.Enterprise;
import business.network.Network;
import business.organization.Organization;
import business.role.Role;
import business.state.State;
import business.useraccount.UserAccount;
import business.usermessage.Message;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import userinterface.buy.ViewBuyerOrdersJPanel;
import userinterface.forum.ForumJpanel;
import userinterface.seller.SellerWorkAreaJPanel;
import userinterface.useraccount.UpdateUserAccount;
import userinterface.usermessage.AllReceviedMessagesJPanel;

/**
 *
 * @author kkkevinxx
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    private EcoSystem system;
    MainLoginFrame mainLoginFrame;
    private String user;
    private String pass;
    private UserAccount user1;
    private Organization org1;
    private boolean onOff = true;
    private Threadsystem myThread;

    public MainJFrame(String un, String pa, EcoSystem system, MainLoginFrame mainLoginFrame, Threadsystem myThread) {
        initComponents();
        setSize(1000, 650);
        //system = ConfigureABusiness.configure();

        this.system = system;
        this.user = un;
        this.pass = pa;
        this.mainLoginFrame = mainLoginFrame;
        this.myThread = myThread;
        //myThread = new Threadsystem();

        Login(user, pass);
        if (user1.getRole().toString().equals("UserRole")) {
            setTitle("Hi, " + user1.getUsername() + "! Welcome to Tangerine!");
        }
        if (user1.getRole().toString().equals("SystemAdminRole")) {
            setTitle("Hi, System Master " + user1.getUsername());
        }
        if (user1.getRole().toString().equals("EnterpriseAdminRole")) {
            setTitle("Hi, University Administrator " + user1.getUsername());
        }
        if (!user1.getRole().toString().equals("UserRole")) {
            //btnChatRoom.setEnabled(false);
            btnAccount.setEnabled(false);
            btnOrders.setEnabled(false);
            btnReadMessages.setEnabled(false);
            btnSeller.setEnabled(false);
            //btnMainPage.setEnabled(false);
        }
        populateAmount();
    }

    public void populateAmount() {
        int i = 0;
        for (Message mm : user1.getMessageDirectory().getMessageList()) {
            if (mm.getReceiver().equals(user1) && mm.getStatus().equals("Unread")) {
                i++;
            }
        }
        btnReadMessages.setText(String.valueOf(i));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPanel = new javax.swing.JSplitPane();
        container = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        userJPanel = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        btnMainPage = new javax.swing.JButton();
        lblPPicture = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnReadMessages = new javax.swing.JButton();
        btnAccount = new javax.swing.JButton();
        btnOrders = new javax.swing.JButton();
        btnSeller = new javax.swing.JButton();
        btnChatRoom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        splitPanel.setDividerLocation(150);

        container.setLayout(new java.awt.CardLayout());

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/main/orange-1154559_960_720.png"))); // NOI18N
        container.add(jLabel3, "card2");

        splitPanel.setRightComponent(container);

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnMainPage.setText("Main Page");
        btnMainPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainPageActionPerformed(evt);
            }
        });

        lblPPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/main/Person.jpg"))); // NOI18N

        jLabel1.setText("New Messages:");

        btnReadMessages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadMessagesActionPerformed(evt);
            }
        });

        btnAccount.setText("My Account");
        btnAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccountActionPerformed(evt);
            }
        });

        btnOrders.setText("My Orders");
        btnOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdersActionPerformed(evt);
            }
        });

        btnSeller.setText("I am Seller");
        btnSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellerActionPerformed(evt);
            }
        });

        btnChatRoom.setText("Chat room");
        btnChatRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChatRoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userJPanelLayout = new javax.swing.GroupLayout(userJPanel);
        userJPanel.setLayout(userJPanelLayout);
        userJPanelLayout.setHorizontalGroup(
            userJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userJPanelLayout.createSequentialGroup()
                .addGroup(userJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSeller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMainPage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(userJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(userJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userJPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblPPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(userJPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                .addComponent(btnReadMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(btnChatRoom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        userJPanelLayout.setVerticalGroup(
            userJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReadMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAccount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOrders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(btnChatRoom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSeller)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMainPage)
                .addGap(14, 14, 14))
        );

        splitPanel.setLeftComponent(userJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Login(String userName, String password) {

        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);

        State inState = null;
        Enterprise inEnterprise = null;
        City inCity = null;
        Organization inOrganization = null;

        if (userAccount == null) {
            for (Network network : system.getNetworkDirectory().getNetworkList()) {
                for (State state : network.getStateDirectory().getStateList()) {
                    for (City city : state.getCityDirectory().getCityList()) {
                        for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                            //System.out.println("a");
                            userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount == null) {
                                //System.out.println("b");
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                    if (userAccount != null) {
                                        //System.out.println("c");
                                        inState = state;
                                        inCity = city;
                                        inEnterprise = enterprise;
                                        inOrganization = organization;
                                        break;
                                    }
                                }
                            } else {
                                //System.out.println("d");
                                inState = state;
                                inCity = city;
                                inEnterprise = enterprise;
                                break;
                            }
                            if (inOrganization != null) {
                                break;
                            }
                        }
                        if (inEnterprise != null) {
                            break;
                        }
                    }
                    if (inCity != null) {
                        break;

                    }
                }
                if (inState != null) {
                    break;
                }
            }
        }
        if (userAccount == null) {

            return;
        } else {
            if (userAccount.getStatus().equals("OK")) {
                CardLayout layout = (CardLayout) container.getLayout();
                //System.out.println(inOrganization.getName());
                lblPPicture.setIcon(Util.FillLabel(userAccount.getPerson().getPicturePath()));
                //System.out.println(userAccount.getPerson().getPicturePath());
                container.add("workArea", userAccount.getRole().createWorkArea(container, userAccount, inOrganization, inEnterprise, inCity, inState, system));
                this.org1 = inOrganization;
                this.user1 = userAccount;
                layout.next(container);
            } else {
                JOptionPane.showMessageDialog(null, "Account Disabled!");
                return;
            }

        }
    }

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        System.exit(0);
//        btnMainPage.setEnabled(false);
//        btnLogout.setEnabled(false);
//
//        container.removeAll();
//        dispose();
//        mainLoginFrame.setVisible(true);

        //dB4OUtil.storeSystem(system);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnMainPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainPageActionPerformed
        // TODO add your handling code here:
        this.system = myThread.getSystem();
        String userName = user;
        // Get Password

        String password = pass;

        //Step1: Check in the system user account directory if you have the user
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);

        State inState = null;
        Enterprise inEnterprise = null;
        City inCity = null;
        Organization inOrganization = null;

        if (userAccount == null) {
            for (Network network : system.getNetworkDirectory().getNetworkList()) {
                for (State state : network.getStateDirectory().getStateList()) {
                    for (City city : state.getCityDirectory().getCityList()) {
                        for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                            //System.out.println("a");
                            userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount == null) {
                                //System.out.println("b");
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                    if (userAccount != null) {
                                        //System.out.println("c");
                                        inState = state;
                                        inCity = city;
                                        inEnterprise = enterprise;
                                        inOrganization = organization;
                                        break;
                                    }
                                }
                            } else {
                                //System.out.println("d");
                                inState = state;
                                inCity = city;
                                inEnterprise = enterprise;
                                break;
                            }
                            if (inOrganization != null) {
                                break;
                            }
                        }
                        if (inEnterprise != null) {
                            break;
                        }
                    }
                    if (inCity != null) {
                        break;

                    }
                }
                if (inState != null) {
                    break;
                }
            }
        }

        if (userAccount == null) {
            JOptionPane.showMessageDialog(null, "Invalid Credentails!");
            return;
        } else {
            //populateAmount();
            CardLayout layout = (CardLayout) container.getLayout();
            //System.out.println(inOrganization.getName());
            container.add("workArea", userAccount.getRole().createWorkArea(container, userAccount, inOrganization, inEnterprise, inCity, inState, system));
            layout.next(container);
            //btnChatRoom.setEnabled(true);
        }
    }//GEN-LAST:event_btnMainPageActionPerformed

    private void btnOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdersActionPerformed
        // TODO add your handling code here:
        this.system = myThread.getSystem();
        String userName = user;
        // Get Password

        String password = pass;

        //Step1: Check in the system user account directory if you have the user
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);

        State inState = null;
        Enterprise inEnterprise = null;
        City inCity = null;
        Organization inOrganization = null;

        if (userAccount == null) {
            for (Network network : system.getNetworkDirectory().getNetworkList()) {
                for (State state : network.getStateDirectory().getStateList()) {
                    for (City city : state.getCityDirectory().getCityList()) {
                        for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                            //System.out.println("a");
                            userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount == null) {
                                //System.out.println("b");
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                    if (userAccount != null) {
                                        //System.out.println("c");
                                        inState = state;
                                        inCity = city;
                                        inEnterprise = enterprise;
                                        inOrganization = organization;
                                        break;
                                    }
                                }
                            } else {
                                //System.out.println("d");
                                inState = state;
                                inCity = city;
                                inEnterprise = enterprise;
                                break;
                            }
                            if (inOrganization != null) {
                                break;
                            }
                        }
                        if (inEnterprise != null) {
                            break;
                        }
                    }
                    if (inCity != null) {
                        break;

                    }
                }
                if (inState != null) {
                    break;
                }
            }
        }

        //Component userC = splitPanel.getLeftComponent();
        //populateAmount();
        ViewBuyerOrdersJPanel viewBuyerOrdersJPanel = new ViewBuyerOrdersJPanel(container, userAccount, system);
        container.add("ViewBuyerOrdersJPanel", viewBuyerOrdersJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_btnOrdersActionPerformed

    private void btnReadMessagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadMessagesActionPerformed
        // TODO add your handling code here:
        this.system = myThread.getSystem();
        String userName = user;
        // Get Password

        String password = pass;

        //Step1: Check in the system user account directory if you have the user
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);

        State inState = null;
        Enterprise inEnterprise = null;
        City inCity = null;
        Organization inOrganization = null;

        if (userAccount == null) {
            for (Network network : system.getNetworkDirectory().getNetworkList()) {
                for (State state : network.getStateDirectory().getStateList()) {
                    for (City city : state.getCityDirectory().getCityList()) {
                        for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                            //System.out.println("a");
                            userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount == null) {
                                //System.out.println("b");
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                    if (userAccount != null) {
                                        //System.out.println("c");
                                        inState = state;
                                        inCity = city;
                                        inEnterprise = enterprise;
                                        inOrganization = organization;
                                        break;
                                    }
                                }
                            } else {
                                //System.out.println("d");
                                inState = state;
                                inCity = city;
                                inEnterprise = enterprise;
                                break;
                            }
                            if (inOrganization != null) {
                                break;
                            }
                        }
                        if (inEnterprise != null) {
                            break;
                        }
                    }
                    if (inCity != null) {
                        break;

                    }
                }
                if (inState != null) {
                    break;
                }
            }
        }

        //Component userC = splitPanel.getLeftComponent();
        //populateAmount();
        AllReceviedMessagesJPanel allMessagesJPanel = new AllReceviedMessagesJPanel(container, userAccount, inOrganization, btnReadMessages, system);
        container.add("allMessagesJPanel", allMessagesJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_btnReadMessagesActionPerformed

    private void btnSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellerActionPerformed
        // TODO add your handling code here:
        this.system = myThread.getSystem();
        String userName = user;
        // Get Password

        String password = pass;

        //Step1: Check in the system user account directory if you have the user
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);

        State inState = null;
        Enterprise inEnterprise = null;
        City inCity = null;
        Organization inOrganization = null;

        if (userAccount == null) {
            for (Network network : system.getNetworkDirectory().getNetworkList()) {
                for (State state : network.getStateDirectory().getStateList()) {
                    for (City city : state.getCityDirectory().getCityList()) {
                        for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                            //System.out.println("a");
                            userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount == null) {
                                //System.out.println("b");
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                    if (userAccount != null) {
                                        //System.out.println("c");
                                        inState = state;
                                        inCity = city;
                                        inEnterprise = enterprise;
                                        inOrganization = organization;
                                        break;
                                    }
                                }
                            } else {
                                //System.out.println("d");
                                inState = state;
                                inCity = city;
                                inEnterprise = enterprise;
                                break;
                            }
                            if (inOrganization != null) {
                                break;
                            }
                        }
                        if (inEnterprise != null) {
                            break;
                        }
                    }
                    if (inCity != null) {
                        break;

                    }
                }
                if (inState != null) {
                    break;
                }
            }
        }

        SellerWorkAreaJPanel sellerWorkAreaJPanel = new SellerWorkAreaJPanel(container, userAccount, inOrganization, system);
        container.add("SellerWorkAreaJPanel", sellerWorkAreaJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_btnSellerActionPerformed

    private void btnAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccountActionPerformed
        // TODO add your handling code here:
        this.system = myThread.getSystem();
        String userName = user;
        // Get Password

        String password = pass;

        //Step1: Check in the system user account directory if you have the user
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);

        State inState = null;
        Enterprise inEnterprise = null;
        City inCity = null;
        Organization inOrganization = null;

        if (userAccount == null) {
            for (Network network : system.getNetworkDirectory().getNetworkList()) {
                for (State state : network.getStateDirectory().getStateList()) {
                    for (City city : state.getCityDirectory().getCityList()) {
                        for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                            //System.out.println("a");
                            userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount == null) {
                                //System.out.println("b");
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                    if (userAccount != null) {
                                        //System.out.println("c");
                                        inState = state;
                                        inCity = city;
                                        inEnterprise = enterprise;
                                        inOrganization = organization;
                                        break;
                                    }
                                }
                            } else {
                                //System.out.println("d");
                                inState = state;
                                inCity = city;
                                inEnterprise = enterprise;
                                break;
                            }
                            if (inOrganization != null) {
                                break;
                            }
                        }
                        if (inEnterprise != null) {
                            break;
                        }
                    }
                    if (inCity != null) {
                        break;

                    }
                }
                if (inState != null) {
                    break;
                }
            }
        }

        UpdateUserAccount updateUserAccount = new UpdateUserAccount(container, system, userAccount, inOrganization, lblPPicture);
        container.add("updateUserAccount", updateUserAccount);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_btnAccountActionPerformed

    private void btnChatRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChatRoomActionPerformed
        // TODO add your handling code here:
        try {
//            // TODO add your handling code here:
//            String userName = user;
//            // Get Password
//            
//            String password = pass;
//            
//            //Step1: Check in the system user account directory if you have the user
//            UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
//            
//            State inState = null;
//            Enterprise inEnterprise = null;
//            City inCity = null;
//            Organization inOrganization = null;
//            
//            if (userAccount == null) {
//                for (Network network : system.getNetworkDirectory().getNetworkList()) {
//                    for (State state : network.getStateDirectory().getStateList()) {
//                        for (City city : state.getCityDirectory().getCityList()) {
//                            for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
//                                //System.out.println("a");
//                                userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
//                                if (userAccount == null) {
//                                    //System.out.println("b");
//                                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
//                                        userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
//                                        if (userAccount != null) {
//                                            //System.out.println("c");
//                                            inState = state;
//                                            inCity = city;
//                                            inEnterprise = enterprise;
//                                            inOrganization = organization;
//                                            break;
//                                        }
//                                    }
//                                } else {
//                                    //System.out.println("d");
//                                    inState = state;
//                                    inCity = city;
//                                    inEnterprise = enterprise;
//                                    break;
//                                }
//                                if (inOrganization != null) {
//                                    break;
//                                }
//                            }
//                            if (inEnterprise != null) {
//                                break;
//                            }
//                        }
//                        if (inCity != null) {
//                            break;
//                            
//                        }
//                    }
//                    if (inState != null) {
//                        break;
//                    }
//                }
//            }
            ForumJpanel forumJpanel = new ForumJpanel(container, system, user1, onOff);
            container.add("ForumJpanel", forumJpanel);
            CardLayout layout = (CardLayout) container.getLayout();
            layout.next(container);
            onOff = false;
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnChatRoomActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccount;
    private javax.swing.JButton btnChatRoom;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnMainPage;
    private javax.swing.JButton btnOrders;
    private javax.swing.JButton btnReadMessages;
    private javax.swing.JButton btnSeller;
    private javax.swing.JPanel container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblPPicture;
    private javax.swing.JSplitPane splitPanel;
    private javax.swing.JPanel userJPanel;
    // End of variables declaration//GEN-END:variables
}
